# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Project implements Node {
  id: ID!
  name: String
  technologies(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Technology!]
}

type Technology implements Node {
  id: ID!
  name: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  childTechnologies(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Technology!]
  parentTechnology(where: TechnologyWhereInput): Technology
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: Role!
}


#
# Other Types
#

type AggregateProject {
  count: Int!
}

type AggregateTechnology {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTechnology(data: TechnologyCreateInput!): Technology!
  createProject(data: ProjectCreateInput!): Project!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTechnology(data: TechnologyUpdateInput!, where: TechnologyWhereUniqueInput!): Technology
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTechnology(where: TechnologyWhereUniqueInput!): Technology
  deleteProject(where: ProjectWhereUniqueInput!): Project
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTechnology(where: TechnologyWhereUniqueInput!, create: TechnologyCreateInput!, update: TechnologyUpdateInput!): Technology!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyTechnologies(data: TechnologyUpdateInput!, where: TechnologyWhereInput!): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyTechnologies(where: TechnologyWhereInput!): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String
  technologies: TechnologyCreateManyWithoutProjectsInput
}

input ProjectCreateManyWithoutTechnologiesInput {
  create: [ProjectCreateWithoutTechnologiesInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutTechnologiesInput {
  name: String
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  technologies: TechnologyUpdateManyWithoutProjectsInput
}

input ProjectUpdateManyWithoutTechnologiesInput {
  create: [ProjectCreateWithoutTechnologiesInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithoutTechnologiesInput!]
  upsert: [ProjectUpsertWithoutTechnologiesInput!]
}

input ProjectUpdateWithoutTechnologiesDataInput {
  name: String
}

input ProjectUpdateWithoutTechnologiesInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutTechnologiesDataInput!
}

input ProjectUpsertWithoutTechnologiesInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutTechnologiesDataInput!
  create: ProjectCreateWithoutTechnologiesInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  technologies_every: TechnologyWhereInput
  technologies_some: TechnologyWhereInput
  technologies_none: TechnologyWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  technologies(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Technology]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  user(where: UserWhereUniqueInput!): User
  technology(where: TechnologyWhereUniqueInput!): Technology
  project(where: ProjectWhereUniqueInput!): Project
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  technologiesConnection(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TechnologyConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  CUSTOMER
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  technology(where: TechnologySubscriptionWhereInput): TechnologySubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
}

type TechnologyConnection {
  pageInfo: PageInfo!
  edges: [TechnologyEdge]!
  aggregate: AggregateTechnology!
}

input TechnologyCreateInput {
  name: String!
  projects: ProjectCreateManyWithoutTechnologiesInput
  childTechnologies: TechnologyCreateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyCreateOneWithoutChildTechnologiesInput
}

input TechnologyCreateManyWithoutParentTechnologyInput {
  create: [TechnologyCreateWithoutChildTechnologiesInput!]
  connect: [TechnologyWhereUniqueInput!]
}

input TechnologyCreateManyWithoutProjectsInput {
  create: [TechnologyCreateWithoutProjectsInput!]
  connect: [TechnologyWhereUniqueInput!]
}

input TechnologyCreateOneWithoutChildTechnologiesInput {
  create: TechnologyCreateWithoutChildTechnologiesInput
  connect: TechnologyWhereUniqueInput
}

input TechnologyCreateWithoutChildTechnologiesInput {
  name: String!
  projects: ProjectCreateManyWithoutTechnologiesInput
}

input TechnologyCreateWithoutProjectsInput {
  name: String!
  childTechnologies: TechnologyCreateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyCreateOneWithoutChildTechnologiesInput
}

type TechnologyEdge {
  node: Technology!
  cursor: String!
}

enum TechnologyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TechnologyPreviousValues {
  id: ID!
  name: String!
}

type TechnologySubscriptionPayload {
  mutation: MutationType!
  node: Technology
  updatedFields: [String!]
  previousValues: TechnologyPreviousValues
}

input TechnologySubscriptionWhereInput {
  AND: [TechnologySubscriptionWhereInput!]
  OR: [TechnologySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TechnologyWhereInput
}

input TechnologyUpdateInput {
  name: String
  projects: ProjectUpdateManyWithoutTechnologiesInput
  childTechnologies: TechnologyUpdateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyUpdateOneWithoutChildTechnologiesInput
}

input TechnologyUpdateManyWithoutParentTechnologyInput {
  create: [TechnologyCreateWithoutChildTechnologiesInput!]
  connect: [TechnologyWhereUniqueInput!]
  disconnect: [TechnologyWhereUniqueInput!]
  delete: [TechnologyWhereUniqueInput!]
  update: [TechnologyUpdateWithoutChildTechnologiesInput!]
  upsert: [TechnologyUpsertWithoutChildTechnologiesInput!]
}

input TechnologyUpdateManyWithoutProjectsInput {
  create: [TechnologyCreateWithoutProjectsInput!]
  connect: [TechnologyWhereUniqueInput!]
  disconnect: [TechnologyWhereUniqueInput!]
  delete: [TechnologyWhereUniqueInput!]
  update: [TechnologyUpdateWithoutProjectsInput!]
  upsert: [TechnologyUpsertWithoutProjectsInput!]
}

input TechnologyUpdateOneWithoutChildTechnologiesInput {
  create: TechnologyCreateWithoutChildTechnologiesInput
  connect: TechnologyWhereUniqueInput
  disconnect: TechnologyWhereUniqueInput
  delete: TechnologyWhereUniqueInput
  update: TechnologyUpdateWithoutChildTechnologiesInput
  upsert: TechnologyUpsertWithoutChildTechnologiesInput
}

input TechnologyUpdateWithoutChildTechnologiesDataInput {
  name: String
  projects: ProjectUpdateManyWithoutTechnologiesInput
}

input TechnologyUpdateWithoutChildTechnologiesInput {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateWithoutChildTechnologiesDataInput!
}

input TechnologyUpdateWithoutProjectsDataInput {
  name: String
  childTechnologies: TechnologyUpdateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyUpdateOneWithoutChildTechnologiesInput
}

input TechnologyUpdateWithoutProjectsInput {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateWithoutProjectsDataInput!
}

input TechnologyUpsertWithoutChildTechnologiesInput {
  where: TechnologyWhereUniqueInput!
  update: TechnologyUpdateWithoutChildTechnologiesDataInput!
  create: TechnologyCreateWithoutChildTechnologiesInput!
}

input TechnologyUpsertWithoutProjectsInput {
  where: TechnologyWhereUniqueInput!
  update: TechnologyUpdateWithoutProjectsDataInput!
  create: TechnologyCreateWithoutProjectsInput!
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  childTechnologies_every: TechnologyWhereInput
  childTechnologies_some: TechnologyWhereInput
  childTechnologies_none: TechnologyWhereInput
  parentTechnology: TechnologyWhereInput
}

input TechnologyWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: Role
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
