import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Project implements Node {
  id: ID!
  name: String
  technologies(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Technology!]
}

type Technology implements Node {
  id: ID!
  name: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  childTechnologies(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Technology!]
  parentTechnology(where: TechnologyWhereInput): Technology
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: Role!
}


#
# Other Types
#

type AggregateProject {
  count: Int!
}

type AggregateTechnology {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTechnology(data: TechnologyCreateInput!): Technology!
  createProject(data: ProjectCreateInput!): Project!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTechnology(data: TechnologyUpdateInput!, where: TechnologyWhereUniqueInput!): Technology
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTechnology(where: TechnologyWhereUniqueInput!): Technology
  deleteProject(where: ProjectWhereUniqueInput!): Project
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTechnology(where: TechnologyWhereUniqueInput!, create: TechnologyCreateInput!, update: TechnologyUpdateInput!): Technology!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyTechnologies(data: TechnologyUpdateInput!, where: TechnologyWhereInput!): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyTechnologies(where: TechnologyWhereInput!): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String
  technologies: TechnologyCreateManyWithoutProjectsInput
}

input ProjectCreateManyWithoutTechnologiesInput {
  create: [ProjectCreateWithoutTechnologiesInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutTechnologiesInput {
  name: String
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  technologies: TechnologyUpdateManyWithoutProjectsInput
}

input ProjectUpdateManyWithoutTechnologiesInput {
  create: [ProjectCreateWithoutTechnologiesInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithoutTechnologiesInput!]
  upsert: [ProjectUpsertWithoutTechnologiesInput!]
}

input ProjectUpdateWithoutTechnologiesDataInput {
  name: String
}

input ProjectUpdateWithoutTechnologiesInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutTechnologiesDataInput!
}

input ProjectUpsertWithoutTechnologiesInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutTechnologiesDataInput!
  create: ProjectCreateWithoutTechnologiesInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  technologies_every: TechnologyWhereInput
  technologies_some: TechnologyWhereInput
  technologies_none: TechnologyWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  technologies(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Technology]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  user(where: UserWhereUniqueInput!): User
  technology(where: TechnologyWhereUniqueInput!): Technology
  project(where: ProjectWhereUniqueInput!): Project
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  technologiesConnection(where: TechnologyWhereInput, orderBy: TechnologyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TechnologyConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  CUSTOMER
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  technology(where: TechnologySubscriptionWhereInput): TechnologySubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
}

type TechnologyConnection {
  pageInfo: PageInfo!
  edges: [TechnologyEdge]!
  aggregate: AggregateTechnology!
}

input TechnologyCreateInput {
  name: String!
  projects: ProjectCreateManyWithoutTechnologiesInput
  childTechnologies: TechnologyCreateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyCreateOneWithoutChildTechnologiesInput
}

input TechnologyCreateManyWithoutParentTechnologyInput {
  create: [TechnologyCreateWithoutChildTechnologiesInput!]
  connect: [TechnologyWhereUniqueInput!]
}

input TechnologyCreateManyWithoutProjectsInput {
  create: [TechnologyCreateWithoutProjectsInput!]
  connect: [TechnologyWhereUniqueInput!]
}

input TechnologyCreateOneWithoutChildTechnologiesInput {
  create: TechnologyCreateWithoutChildTechnologiesInput
  connect: TechnologyWhereUniqueInput
}

input TechnologyCreateWithoutChildTechnologiesInput {
  name: String!
  projects: ProjectCreateManyWithoutTechnologiesInput
}

input TechnologyCreateWithoutProjectsInput {
  name: String!
  childTechnologies: TechnologyCreateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyCreateOneWithoutChildTechnologiesInput
}

type TechnologyEdge {
  node: Technology!
  cursor: String!
}

enum TechnologyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TechnologyPreviousValues {
  id: ID!
  name: String!
}

type TechnologySubscriptionPayload {
  mutation: MutationType!
  node: Technology
  updatedFields: [String!]
  previousValues: TechnologyPreviousValues
}

input TechnologySubscriptionWhereInput {
  AND: [TechnologySubscriptionWhereInput!]
  OR: [TechnologySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TechnologyWhereInput
}

input TechnologyUpdateInput {
  name: String
  projects: ProjectUpdateManyWithoutTechnologiesInput
  childTechnologies: TechnologyUpdateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyUpdateOneWithoutChildTechnologiesInput
}

input TechnologyUpdateManyWithoutParentTechnologyInput {
  create: [TechnologyCreateWithoutChildTechnologiesInput!]
  connect: [TechnologyWhereUniqueInput!]
  disconnect: [TechnologyWhereUniqueInput!]
  delete: [TechnologyWhereUniqueInput!]
  update: [TechnologyUpdateWithoutChildTechnologiesInput!]
  upsert: [TechnologyUpsertWithoutChildTechnologiesInput!]
}

input TechnologyUpdateManyWithoutProjectsInput {
  create: [TechnologyCreateWithoutProjectsInput!]
  connect: [TechnologyWhereUniqueInput!]
  disconnect: [TechnologyWhereUniqueInput!]
  delete: [TechnologyWhereUniqueInput!]
  update: [TechnologyUpdateWithoutProjectsInput!]
  upsert: [TechnologyUpsertWithoutProjectsInput!]
}

input TechnologyUpdateOneWithoutChildTechnologiesInput {
  create: TechnologyCreateWithoutChildTechnologiesInput
  connect: TechnologyWhereUniqueInput
  disconnect: TechnologyWhereUniqueInput
  delete: TechnologyWhereUniqueInput
  update: TechnologyUpdateWithoutChildTechnologiesInput
  upsert: TechnologyUpsertWithoutChildTechnologiesInput
}

input TechnologyUpdateWithoutChildTechnologiesDataInput {
  name: String
  projects: ProjectUpdateManyWithoutTechnologiesInput
}

input TechnologyUpdateWithoutChildTechnologiesInput {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateWithoutChildTechnologiesDataInput!
}

input TechnologyUpdateWithoutProjectsDataInput {
  name: String
  childTechnologies: TechnologyUpdateManyWithoutParentTechnologyInput
  parentTechnology: TechnologyUpdateOneWithoutChildTechnologiesInput
}

input TechnologyUpdateWithoutProjectsInput {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateWithoutProjectsDataInput!
}

input TechnologyUpsertWithoutChildTechnologiesInput {
  where: TechnologyWhereUniqueInput!
  update: TechnologyUpdateWithoutChildTechnologiesDataInput!
  create: TechnologyCreateWithoutChildTechnologiesInput!
}

input TechnologyUpsertWithoutProjectsInput {
  where: TechnologyWhereUniqueInput!
  update: TechnologyUpdateWithoutProjectsDataInput!
  create: TechnologyCreateWithoutProjectsInput!
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  childTechnologies_every: TechnologyWhereInput
  childTechnologies_some: TechnologyWhereInput
  childTechnologies_none: TechnologyWhereInput
  parentTechnology: TechnologyWhereInput
}

input TechnologyWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: Role
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`

export type TechnologyOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ProjectOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'email_ASC' |
  'email_DESC' |
  'password_ASC' |
  'password_DESC' |
  'name_ASC' |
  'name_DESC' |
  'role_ASC' |
  'role_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type Role = 
  'ADMIN' |
  'CUSTOMER'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface TechnologyCreateWithoutChildTechnologiesInput {
  name: String
  projects?: ProjectCreateManyWithoutTechnologiesInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  role?: Role
  role_not?: Role
  role_in?: Role[] | Role
  role_not_in?: Role[] | Role
}

export interface TechnologyUpdateWithoutChildTechnologiesInput {
  where: TechnologyWhereUniqueInput
  data: TechnologyUpdateWithoutChildTechnologiesDataInput
}

export interface ProjectUpdateManyWithoutTechnologiesInput {
  create?: ProjectCreateWithoutTechnologiesInput[] | ProjectCreateWithoutTechnologiesInput
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutTechnologiesInput[] | ProjectUpdateWithoutTechnologiesInput
  upsert?: ProjectUpsertWithoutTechnologiesInput[] | ProjectUpsertWithoutTechnologiesInput
}

export interface TechnologyUpdateManyWithoutParentTechnologyInput {
  create?: TechnologyCreateWithoutChildTechnologiesInput[] | TechnologyCreateWithoutChildTechnologiesInput
  connect?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
  disconnect?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
  delete?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
  update?: TechnologyUpdateWithoutChildTechnologiesInput[] | TechnologyUpdateWithoutChildTechnologiesInput
  upsert?: TechnologyUpsertWithoutChildTechnologiesInput[] | TechnologyUpsertWithoutChildTechnologiesInput
}

export interface TechnologyCreateManyWithoutProjectsInput {
  create?: TechnologyCreateWithoutProjectsInput[] | TechnologyCreateWithoutProjectsInput
  connect?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
}

export interface ProjectUpsertWithoutTechnologiesInput {
  where: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutTechnologiesDataInput
  create: ProjectCreateWithoutTechnologiesInput
}

export interface ProjectSubscriptionWhereInput {
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ProjectWhereInput
}

export interface ProjectUpdateWithoutTechnologiesDataInput {
  name?: String
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface UserCreateInput {
  email: String
  password: String
  name: String
  role?: Role
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  email?: String
}

export interface TechnologyCreateInput {
  name: String
  projects?: ProjectCreateManyWithoutTechnologiesInput
  childTechnologies?: TechnologyCreateManyWithoutParentTechnologyInput
  parentTechnology?: TechnologyCreateOneWithoutChildTechnologiesInput
}

export interface ProjectWhereUniqueInput {
  id?: ID_Input
}

export interface ProjectCreateManyWithoutTechnologiesInput {
  create?: ProjectCreateWithoutTechnologiesInput[] | ProjectCreateWithoutTechnologiesInput
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput
}

export interface TechnologyUpdateWithoutProjectsInput {
  where: TechnologyWhereUniqueInput
  data: TechnologyUpdateWithoutProjectsDataInput
}

export interface ProjectCreateWithoutTechnologiesInput {
  name?: String
}

export interface ProjectUpdateInput {
  name?: String
  technologies?: TechnologyUpdateManyWithoutProjectsInput
}

export interface TechnologyCreateManyWithoutParentTechnologyInput {
  create?: TechnologyCreateWithoutChildTechnologiesInput[] | TechnologyCreateWithoutChildTechnologiesInput
  connect?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
}

export interface TechnologyUpsertWithoutChildTechnologiesInput {
  where: TechnologyWhereUniqueInput
  update: TechnologyUpdateWithoutChildTechnologiesDataInput
  create: TechnologyCreateWithoutChildTechnologiesInput
}

export interface ProjectUpdateWithoutTechnologiesInput {
  where: ProjectWhereUniqueInput
  data: ProjectUpdateWithoutTechnologiesDataInput
}

export interface ProjectWhereInput {
  AND?: ProjectWhereInput[] | ProjectWhereInput
  OR?: ProjectWhereInput[] | ProjectWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  technologies_every?: TechnologyWhereInput
  technologies_some?: TechnologyWhereInput
  technologies_none?: TechnologyWhereInput
}

export interface TechnologyCreateOneWithoutChildTechnologiesInput {
  create?: TechnologyCreateWithoutChildTechnologiesInput
  connect?: TechnologyWhereUniqueInput
}

export interface TechnologyUpsertWithoutProjectsInput {
  where: TechnologyWhereUniqueInput
  update: TechnologyUpdateWithoutProjectsDataInput
  create: TechnologyCreateWithoutProjectsInput
}

export interface ProjectCreateInput {
  name?: String
  technologies?: TechnologyCreateManyWithoutProjectsInput
}

export interface TechnologyUpdateWithoutProjectsDataInput {
  name?: String
  childTechnologies?: TechnologyUpdateManyWithoutParentTechnologyInput
  parentTechnology?: TechnologyUpdateOneWithoutChildTechnologiesInput
}

export interface TechnologyUpdateOneWithoutChildTechnologiesInput {
  create?: TechnologyCreateWithoutChildTechnologiesInput
  connect?: TechnologyWhereUniqueInput
  disconnect?: TechnologyWhereUniqueInput
  delete?: TechnologyWhereUniqueInput
  update?: TechnologyUpdateWithoutChildTechnologiesInput
  upsert?: TechnologyUpsertWithoutChildTechnologiesInput
}

export interface TechnologyUpdateInput {
  name?: String
  projects?: ProjectUpdateManyWithoutTechnologiesInput
  childTechnologies?: TechnologyUpdateManyWithoutParentTechnologyInput
  parentTechnology?: TechnologyUpdateOneWithoutChildTechnologiesInput
}

export interface UserUpdateInput {
  email?: String
  password?: String
  name?: String
  role?: Role
}

export interface TechnologyCreateWithoutProjectsInput {
  name: String
  childTechnologies?: TechnologyCreateManyWithoutParentTechnologyInput
  parentTechnology?: TechnologyCreateOneWithoutChildTechnologiesInput
}

export interface TechnologyWhereInput {
  AND?: TechnologyWhereInput[] | TechnologyWhereInput
  OR?: TechnologyWhereInput[] | TechnologyWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  projects_every?: ProjectWhereInput
  projects_some?: ProjectWhereInput
  projects_none?: ProjectWhereInput
  childTechnologies_every?: TechnologyWhereInput
  childTechnologies_some?: TechnologyWhereInput
  childTechnologies_none?: TechnologyWhereInput
  parentTechnology?: TechnologyWhereInput
}

export interface TechnologyUpdateWithoutChildTechnologiesDataInput {
  name?: String
  projects?: ProjectUpdateManyWithoutTechnologiesInput
}

export interface TechnologyUpdateManyWithoutProjectsInput {
  create?: TechnologyCreateWithoutProjectsInput[] | TechnologyCreateWithoutProjectsInput
  connect?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
  disconnect?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
  delete?: TechnologyWhereUniqueInput[] | TechnologyWhereUniqueInput
  update?: TechnologyUpdateWithoutProjectsInput[] | TechnologyUpdateWithoutProjectsInput
  upsert?: TechnologyUpsertWithoutProjectsInput[] | TechnologyUpsertWithoutProjectsInput
}

export interface TechnologyWhereUniqueInput {
  id?: ID_Input
}

export interface TechnologySubscriptionWhereInput {
  AND?: TechnologySubscriptionWhereInput[] | TechnologySubscriptionWhereInput
  OR?: TechnologySubscriptionWhereInput[] | TechnologySubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: TechnologyWhereInput
}

export interface Node {
  id: ID_Output
}

export interface Project extends Node {
  id: ID_Output
  name?: String
  technologies?: Technology[]
}

export interface ProjectPreviousValues {
  id: ID_Output
  name?: String
}

export interface BatchPayload {
  count: Long
}

export interface ProjectEdge {
  node: Project
  cursor: String
}

export interface ProjectConnection {
  pageInfo: PageInfo
  edges: ProjectEdge[]
  aggregate: AggregateProject
}

export interface TechnologySubscriptionPayload {
  mutation: MutationType
  node?: Technology
  updatedFields?: String[]
  previousValues?: TechnologyPreviousValues
}

export interface TechnologyEdge {
  node: Technology
  cursor: String
}

export interface AggregateTechnology {
  count: Int
}

export interface User extends Node {
  id: ID_Output
  email: String
  password: String
  name: String
  role: Role
}

export interface AggregateUser {
  count: Int
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType
  node?: Project
  updatedFields?: String[]
  previousValues?: ProjectPreviousValues
}

export interface Technology extends Node {
  id: ID_Output
  name: String
  projects?: Project[]
  childTechnologies?: Technology[]
  parentTechnology?: Technology
}

export interface UserPreviousValues {
  id: ID_Output
  email: String
  password: String
  name: String
  role: Role
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface TechnologyPreviousValues {
  id: ID_Output
  name: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface TechnologyConnection {
  pageInfo: PageInfo
  edges: TechnologyEdge[]
  aggregate: AggregateTechnology
}

export interface AggregateProject {
  count: Int
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export type Long = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  technologies: (args: { where?: TechnologyWhereInput, orderBy?: TechnologyOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Technology[]>
  projects: (args: { where?: ProjectWhereInput, orderBy?: ProjectOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Project[]>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  technology: (args: { where: TechnologyWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Technology | null>
  project: (args: { where: ProjectWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Project | null>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  technologiesConnection: (args: { where?: TechnologyWhereInput, orderBy?: TechnologyOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<TechnologyConnection>
  projectsConnection: (args: { where?: ProjectWhereInput, orderBy?: ProjectOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ProjectConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createTechnology: (args: { data: TechnologyCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Technology>
  createProject: (args: { data: ProjectCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Project>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updateTechnology: (args: { data: TechnologyUpdateInput, where: TechnologyWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Technology | null>
  updateProject: (args: { data: ProjectUpdateInput, where: ProjectWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Project | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deleteTechnology: (args: { where: TechnologyWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Technology | null>
  deleteProject: (args: { where: ProjectWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Project | null>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertTechnology: (args: { where: TechnologyWhereUniqueInput, create: TechnologyCreateInput, update: TechnologyUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Technology>
  upsertProject: (args: { where: ProjectWhereUniqueInput, create: ProjectCreateInput, update: ProjectUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Project>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyTechnologies: (args: { data: TechnologyUpdateInput, where: TechnologyWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyProjects: (args: { data: ProjectUpdateInput, where: ProjectWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyTechnologies: (args: { where: TechnologyWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyProjects: (args: { where: ProjectWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  technology: (args: { where?: TechnologySubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<TechnologySubscriptionPayload>>
  project: (args: { where?: ProjectSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ProjectSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Technology: (where: TechnologyWhereInput): Promise<boolean> => super.existsDelegate('query', 'technologies', { where }, {}, '{ id }'),
    Project: (where: ProjectWhereInput): Promise<boolean> => super.existsDelegate('query', 'projects', { where }, {}, '{ id }')
  }

  query: Query = {
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    technologies: (args, info): Promise<Technology[]> => super.delegate('query', 'technologies', args, {}, info),
    projects: (args, info): Promise<Project[]> => super.delegate('query', 'projects', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    technology: (args, info): Promise<Technology | null> => super.delegate('query', 'technology', args, {}, info),
    project: (args, info): Promise<Project | null> => super.delegate('query', 'project', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    technologiesConnection: (args, info): Promise<TechnologyConnection> => super.delegate('query', 'technologiesConnection', args, {}, info),
    projectsConnection: (args, info): Promise<ProjectConnection> => super.delegate('query', 'projectsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createTechnology: (args, info): Promise<Technology> => super.delegate('mutation', 'createTechnology', args, {}, info),
    createProject: (args, info): Promise<Project> => super.delegate('mutation', 'createProject', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updateTechnology: (args, info): Promise<Technology | null> => super.delegate('mutation', 'updateTechnology', args, {}, info),
    updateProject: (args, info): Promise<Project | null> => super.delegate('mutation', 'updateProject', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deleteTechnology: (args, info): Promise<Technology | null> => super.delegate('mutation', 'deleteTechnology', args, {}, info),
    deleteProject: (args, info): Promise<Project | null> => super.delegate('mutation', 'deleteProject', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertTechnology: (args, info): Promise<Technology> => super.delegate('mutation', 'upsertTechnology', args, {}, info),
    upsertProject: (args, info): Promise<Project> => super.delegate('mutation', 'upsertProject', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyTechnologies: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyTechnologies', args, {}, info),
    updateManyProjects: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyProjects', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyTechnologies: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyTechnologies', args, {}, info),
    deleteManyProjects: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyProjects', args, {}, info)
  }

  subscription: Subscription = {
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    technology: (args, infoOrQuery): Promise<AsyncIterator<TechnologySubscriptionPayload>> => super.delegateSubscription('technology', args, {}, infoOrQuery),
    project: (args, infoOrQuery): Promise<AsyncIterator<ProjectSubscriptionPayload>> => super.delegateSubscription('project', args, {}, infoOrQuery)
  }
}